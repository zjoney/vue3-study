"use strict";Object.defineProperty(exports, "__esModule", {value: true});




var _chunkVZV75T35js = require('./chunk-VZV75T35.js');


var _chunk4DY6RZ4Jjs = require('./chunk-4DY6RZ4J.js');

// src/core/transform.ts
var _compilersfc = require('@vue/compiler-sfc');
var transform = (code, id) => {
  if (!code.includes(_chunk4DY6RZ4Jjs.DEFINE_OPTIONS_NAME))
    return;
  const sfc = _chunkVZV75T35js.parseSFC.call(void 0, code, id);
  if (!sfc.scriptSetup)
    return;
  if (!sfc.scriptSetup.scriptSetupAst) {
    sfc.scriptSetup = _compilersfc.compileScript.call(void 0, sfc, {
      id
    });
  }
  const { script, scriptSetup, source } = sfc;
  const nodes = _chunkVZV75T35js.filterMarco.call(void 0, scriptSetup);
  if (nodes.length === 0)
    return;
  else if (nodes.length > 1)
    throw new SyntaxError(`duplicate ${_chunk4DY6RZ4Jjs.DEFINE_OPTIONS_NAME}() call`);
  if (script)
    throw new SyntaxError(`${_chunk4DY6RZ4Jjs.DEFINE_OPTIONS_NAME} cannot be used, with both script and script-setup.`);
  const node = nodes[0];
  const arg = node.arguments[0];
  if (!(node.arguments.length === 1 && arg.type === "ObjectExpression")) {
    throw new SyntaxError(`${_chunk4DY6RZ4Jjs.DEFINE_OPTIONS_NAME}() arguments error`);
  }
  if (_chunkVZV75T35js.hasPropsOrEmits.call(void 0, arg)) {
    throw new SyntaxError(`${_chunk4DY6RZ4Jjs.DEFINE_OPTIONS_NAME}() please use defineProps or defineEmits instead.`);
  }
  _chunkVZV75T35js.checkInvalidScopeReference.call(void 0, arg, _chunk4DY6RZ4Jjs.DEFINE_OPTIONS_NAME, scriptSetup);
  const argText = scriptSetup.loc.source.slice(arg.start, arg.end);
  const s = new (0, _compilersfc.MagicString)(source);
  const lang = scriptSetup.attrs.lang ? ` lang="${scriptSetup.attrs.lang}"` : "";
  s.prepend(`<script${lang}>
export default ${argText}<\/script>
`);
  s.remove(scriptSetup.loc.start.offset + node.start, scriptSetup.loc.start.offset + node.end);
  return {
    code: s.toString(),
    get map() {
      return s.generateMap({
        source: id,
        includeContent: true
      });
    }
  };
};



exports.transform = transform;
